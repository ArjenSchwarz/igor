box: golang
build:
  steps:
    # Store the original source dir so we can pass the zip file to deploy
    - script:
      name: provide chance for deployment
      code: |
        export ORG_SOURCE=$WERCKER_SOURCE_DIR
    # Sets the go workspace and places package
    # at the right place in the workspace tree.
    # Interferes with storing dist files.
    - wercker/setup-go-workspace:
      package-dir: github.com/ArjenSchwarz/igor
    # Get the dependencies
    - script:
        name: go get
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          go get -t ./...
    - wercker/golint
    - script:
        name: go build
        code: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a  -ldflags '-s' -installsuffix cgo -o main
    - script:
        name: go test
        code: |
          go test ./...
    - install-packages:
        packages: zip
    # We zip up all the files needed for deploying to Lambda.
    # This then needs to be copied to the original source dir
    # to ensure it's present in the deploy step
    - script:
        name: create GitHub zip file
        code: |
          mkdir dist
          cp config_example.yml config.yml
          zip -r dist/igor.zip main index.js config.yml language/
          zip -r dist/installation.zip installation
          cp -R dist $ORG_SOURCE/
    - script:
        name: Prepare for personal releases
        code: |
          mkdir -p personal/ignoreme personal/gang personal/legends zips
          cp -R main index.js language personal/ignoreme
          cp -R main index.js language personal/gang
          cp -R main index.js language personal/legends
    - arjen/s3get:
        access_key: $AWS_ACCESS_KEY
        secret_key: $AWS_SECRET_KEY
        bucket: igor-configs
        key: ignoreme.yml
        filename: $WERCKER_SOURCE_DIR/personal/ignoreme/config.yml
    - arjen/s3get:
        access_key: $AWS_ACCESS_KEY
        secret_key: $AWS_SECRET_KEY
        bucket: igor-configs
        key: gang.yml
        filename: $WERCKER_SOURCE_DIR/personal/gang/config.yml
    - arjen/s3get:
        access_key: $AWS_ACCESS_KEY
        secret_key: $AWS_SECRET_KEY
        bucket: igor-configs
        key: legends.yml
        filename: $WERCKER_SOURCE_DIR/personal/legends/config.yml
    - script:
        name: Create personal releases
        code: |
          cd $WERCKER_SOURCE_DIR/personal/ignoreme
          zip -r $WERCKER_SOURCE_DIR/zips/ignoreme.zip *
          cd $WERCKER_SOURCE_DIR/personal/gang
          zip -r $WERCKER_SOURCE_DIR/zips/gang.zip *
          cd $WERCKER_SOURCE_DIR/personal/legends
          zip -r $WERCKER_SOURCE_DIR/zips/legends.zip *
          cd $WERCKER_SOURCE_DIR
          cp -R $WERCKER_SOURCE_DIR/zips $ORG_SOURCE
          ls $ORG_SOURCE/zips
    - script:
        name: prepare for Docker build
        code: |
          cp -R main language dockerbuild/
          cp -R dockerbuild $ORG_SOURCE/

deploy:
  steps:
    - tcnksm/ghr:
      token: $GITHUB_TOKEN
      input: $WERCKER_SOURCE_DIR/dist
      version: latest
      replace: true
  docker:
    - script:
        name: Prepare for Docker build
        code: |
          mkdir -p /tmp/pipeline
          mv $WERCKER_ROOT/* /tmp/pipeline/
          mv /tmp/pipeline/dockerbuild/* $WERCKER_ROOT
    - internal/docker-scratch-push:
        username: $HUB_USERNAME
        password: $HUB_PASSWORD
        cmd: "/main -server"
        ports: "8080"
        repository: arjenschwarz/igor
  lambda:
    - arjen/lambda:
        access_key: $AWS_ACCESS_KEY
        secret_key: $AWS_SECRET_KEY
        function_name: igor
        filepath: $WERCKER_SOURCE_DIR/zips/ignoreme.zip
    - arjen/lambda:
        access_key: $AWS_ACCESS_KEY
        secret_key: $AWS_SECRET_KEY
        function_name: igorGang
        filepath: $WERCKER_SOURCE_DIR/zips/gang.zip
    - arjen/lambda:
        access_key: $AWS_ACCESS_KEY
        secret_key: $AWS_SECRET_KEY
        function_name: legendsigor
        filepath: $WERCKER_SOURCE_DIR/zips/legends.zip
