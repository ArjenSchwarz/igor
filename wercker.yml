box: golang
build:
  steps:
    # Store the original source dir so we can pass the zip file to deploy
    - script:
      name: provide chance for deployment
      code: |
        export ORG_SOURCE=$WERCKER_SOURCE_DIR
    # Sets the go workspace and places package
    # at the right place in the workspace tree.
    # Interferes with storing dist files.
    - wercker/setup-go-workspace:
      package-dir: github.com/ArjenSchwarz/igor
    # Get the dependencies
    - script:
        name: go get
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          go get -t ./...
    - wercker/golint
    - script:
        name: go build
        code: |
          GOOS=linux GOARCH=amd64 go build -o main
    - script:
        name: go test
        code: |
          go test ./...
    - install-packages:
        packages: zip
    # We zip up all the files needed for deploying to Lambda.
    # This then needs to be copied to the original source dir
    # to ensure it's present in the deploy step
    - script:
        name: create zip file
        code: |
          mkdir dist
          cp config_example.yml config.yml
          zip -r dist/igor.zip main index.js config.yml
          zip -r dist/installation.zip installation
          cp -R dist $ORG_SOURCE/
deploy:
  steps:
    - tcnksm/ghr:
      token: $GITHUB_TOKEN
      input: $WERCKER_SOURCE_DIR/dist
      version: latest
      replace: true