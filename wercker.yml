box: golang
build:
  steps:
    # Store the original source dir so we can pass the zip file to deploy
    - script:
      name: provide chance for deployment
      code: |
        export ORG_SOURCE=$WERCKER_SOURCE_DIR
    # Sets the go workspace and places package
    # at the right place in the workspace tree.
    # Interferes with storing dist files.
    - wercker/setup-go-workspace:
      package-dir: github.com/ArjenSchwarz/igor
    # Get the dependencies
    - script:
        name: go get
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          go get -t ./...
    - wercker/golint
    - script:
        name: go build
        code: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o main
    - script:
        name: go test
        code: |
          go test ./...
    - install-packages:
        packages: zip
    # We zip up all the files needed for deploying to Lambda.
    # This then needs to be copied to the original source dir
    # to ensure it's present in the deploy step
    - script:
        name: create zip file
        code: |
          mkdir dist
          cp config_example.yml config.yml
          zip -r dist/igor.zip main index.js config.yml
          zip -r dist/installation.zip installation
          cp -R dist $ORG_SOURCE/
          cp main dockerbuild/
          cp -R dockerbuild $ORG_SOURCE/

deploy:
  steps:
    - tcnksm/ghr:
      token: $GITHUB_TOKEN
      input: $WERCKER_SOURCE_DIR/dist
      version: latest
      replace: true
  docker:
    - script:
        name: Prepare for Docker build
        code: |
          ls -lh $WERCKER_ROOT
          mkdir -p /tmp/pipeline
          mv $WERCKER_ROOT/* /tmp/pipeline/
          ls -lh /tmp/pipeline
          ls -lh /tmp/pipeline/dockerbuild
          mv /tmp/pipeline/dockerbuild/* $WERCKER_ROOT
          ls -lh $WERCKER_ROOT
          # cp $WERCKER_ROOT/main $WERCKER_SOURCE_DIR
          # cp $WERCKER_ROOT/main $WERCKER_OUTPUT_DIR
          # export WERCKER_ROOT=$WERCKER_OUTPUT_DIR
          # cp $WERCKER_SOURCE_DIR/main $WERCKER_OUTPUT_DIR
          # ls $WERCKER_OUTPUT_DIR
    # - script:
    #     name: Move dist away
    #     code: mv $WERCKER_SOURCE_DIR/dist /tmp/
    - internal/docker-scratch-push:
        username: $HUB_USERNAME
        password: $HUB_PASSWORD
        cmd: "/main -server"
        ports: "8080"
        repository: arjenschwarz/igor
    - script:
        name: Move things back
        code: mv /tmp/pipeline/* $WERCKER_SOURCE_DIR
