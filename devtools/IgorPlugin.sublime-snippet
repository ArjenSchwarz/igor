<snippet>
    <content><![CDATA[
package plugins

import (
	"errors"

	"github.com/ArjenSchwarz/igor/slack"
)

// ${1:name}Plugin ${2:description}
type ${1:name}Plugin struct {
	name		string
	description	string
}

// ${1:name} instantiates the ${1:name}Plugin
func ${1:name}() IgorPlugin {
	plugin := ${1:name}Plugin{
		name:        "${3:shortname}",
		description: "$Igor {2:description}",
	}
	return plugin
}

// Work parses the request and ensures a request comes through if any triggers
// are matched. Handled triggers:
func (${1:name}Plugin) Work(request slack.Request) (slack.Response, error) {
	response := slack.Response{}

	if response.Text == "" {
		return response, errors.New("No match")
	}
	return response, nil
}

// Describe provides the triggers ${1:name}Plugin can handle
func (${1:name}Plugin) Describe() map[string]string {
	descriptions := make(map[string]string)
	return descriptions
}

// Description returns a global description of the plugin
func (plugin ${1:name}Plugin) Description() string {
	return plugin.description
}

// Name returns the name of the plugin
func (plugin ${1:name}Plugin) Name() string {
	return plugin.name
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>igor</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.go</scope>
</snippet>
